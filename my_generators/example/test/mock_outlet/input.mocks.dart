// Mocks generated by Mockito 5.0.8 from annotations
// in example_usage/test/mock_outlet/input.dart.
// Do not manually edit this file.

import 'dart:async' as _i4;

import 'package:example_usage/model.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;

import 'input.dart' as _i3;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: comment_references
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis

class _FakeDog extends _i1.Fake implements _i2.Dog {}

/// A class which mocks [SomeService].
///
/// See the documentation for Mockito's code generation for more information.
class MockSomeService extends _i1.Mock implements _i3.SomeService {
  MockSomeService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<int> bar(_i2.Cat? man) =>
      (super.noSuchMethod(Invocation.method(#bar, [man]),
          returnValue: Future<int>.value(0)) as _i4.Future<int>);
  @override
  _i4.Future<_i2.Dog> foo(String? foune, [bool? clean = true]) =>
      (super.noSuchMethod(Invocation.method(#foo, [foune, clean]),
              returnValue: Future<_i2.Dog>.value(_FakeDog()))
          as _i4.Future<_i2.Dog>);
}

/// A class which mocks [SomeController].
///
/// See the documentation for Mockito's code generation for more information.
class MockSomeController extends _i1.Mock implements _i3.SomeController {
  MockSomeController() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<int> bar(String? key,
          {String? glass = r'water', _i2.Dog? test, String? zero}) =>
      (super.noSuchMethod(
          Invocation.method(
              #bar, [key], {#glass: glass, #test: test, #zero: zero}),
          returnValue: Future<int>.value(0)) as _i4.Future<int>);
  @override
  _i4.Future<int> foo() => (super.noSuchMethod(Invocation.method(#foo, []),
      returnValue: Future<int>.value(0)) as _i4.Future<int>);
  @override
  _i4.Stream<int> baz() => (super.noSuchMethod(Invocation.method(#baz, []),
      returnValue: Stream<int>.empty()) as _i4.Stream<int>);
}
